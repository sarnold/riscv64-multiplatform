From 1d3597d2d28b6c792bb7ef5f9f769e4df5bada47 Mon Sep 17 00:00:00 2001
From: "Huan.Feng" <huan.feng@starfivetech.com>
Date: Fri, 2 Apr 2021 10:56:52 +0800
Subject: [PATCH 77/79] remove i2c gpio configure

---
 drivers/i2c/busses/i2c-designware-core.h    |  2 -
 drivers/i2c/busses/i2c-designware-master.c  | 60 ++-------------------
 drivers/i2c/busses/i2c-designware-platdrv.c |  3 --
 3 files changed, 4 insertions(+), 61 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-core.h b/drivers/i2c/busses/i2c-designware-core.h
index 1e92d57ccd2f..eb5ef4d0f463 100644
--- a/drivers/i2c/busses/i2c-designware-core.h
+++ b/drivers/i2c/busses/i2c-designware-core.h
@@ -284,8 +284,6 @@ struct dw_i2c_dev {
 	int			(*init)(struct dw_i2c_dev *dev);
 	int			(*set_sda_hold_time)(struct dw_i2c_dev *dev);
 	int			mode;
-	int			scl_gpio;
-	int			sda_gpio;
 	struct i2c_bus_recovery_info rinfo;
 	bool			suspended;
 };
diff --git a/drivers/i2c/busses/i2c-designware-master.c b/drivers/i2c/busses/i2c-designware-master.c
index f023df4dabcc..99d74ddf1313 100644
--- a/drivers/i2c/busses/i2c-designware-master.c
+++ b/drivers/i2c/busses/i2c-designware-master.c
@@ -172,58 +172,6 @@ static int i2c_dw_set_timings_master(struct dw_i2c_dev *dev)
 	return ret;
 }
 
-static void i2c_dw_configure_gpio(struct dw_i2c_dev *dev)
-{
-	if((dev->scl_gpio > 0) && (dev->sda_gpio > 0)) {
-		switch(dev->adapter.nr) {
-		case 0:
-			SET_GPIO_dout_LOW(dev->scl_gpio);
-			SET_GPIO_dout_LOW(dev->sda_gpio);
-			SET_GPIO_doen_reverse_(dev->scl_gpio,1);
-			SET_GPIO_doen_reverse_(dev->sda_gpio,1);
-			SET_GPIO_doen_i2c0_pad_sck_oe(dev->scl_gpio);
-			SET_GPIO_doen_i2c0_pad_sda_oe(dev->sda_gpio);
-			SET_GPIO_i2c0_pad_sck_in(dev->scl_gpio);
-			SET_GPIO_i2c0_pad_sda_in(dev->sda_gpio);
-			break;
-		case 1:
-			SET_GPIO_dout_LOW(dev->scl_gpio);
-			SET_GPIO_dout_LOW(dev->sda_gpio);
-			SET_GPIO_doen_reverse_(dev->scl_gpio,1);
-			SET_GPIO_doen_reverse_(dev->sda_gpio,1);
-			SET_GPIO_doen_i2c1_pad_sck_oe(dev->scl_gpio);
-			SET_GPIO_doen_i2c1_pad_sda_oe(dev->sda_gpio);
-			SET_GPIO_i2c1_pad_sck_in(dev->scl_gpio);
-			SET_GPIO_i2c1_pad_sda_in(dev->sda_gpio);
-			break;
-		case 2:
-			SET_GPIO_dout_LOW(dev->scl_gpio);
-			SET_GPIO_dout_LOW(dev->sda_gpio);
-			SET_GPIO_doen_reverse_(dev->scl_gpio,1);
-			SET_GPIO_doen_reverse_(dev->sda_gpio,1);
-			SET_GPIO_doen_i2c2_pad_sck_oe(dev->scl_gpio);
-			SET_GPIO_doen_i2c2_pad_sda_oe(dev->sda_gpio);
-			SET_GPIO_i2c2_pad_sck_in(dev->scl_gpio);
-			SET_GPIO_i2c2_pad_sda_in(dev->sda_gpio);
-			break;
-		case 3:
-			SET_GPIO_dout_LOW(dev->scl_gpio);
-			SET_GPIO_dout_LOW(dev->sda_gpio);
-			SET_GPIO_doen_reverse_(dev->scl_gpio,1);
-			SET_GPIO_doen_reverse_(dev->sda_gpio,1);
-			SET_GPIO_doen_i2c3_pad_sck_oe(dev->scl_gpio);
-			SET_GPIO_doen_i2c3_pad_sda_oe(dev->sda_gpio);
-			SET_GPIO_i2c3_pad_sck_in(dev->scl_gpio);
-			SET_GPIO_i2c3_pad_sda_in(dev->sda_gpio);
-			break;
-		default:
-			dev_warn(dev->dev, "NOTE: i2c adapter number is invalid\n");
-		}
-	}
-	else
-		dev_warn(dev->dev, "NOTE: scl/sda gpio number is invalid !\n");
-}
-
 /**
  * i2c_dw_init() - Initialize the designware I2C master hardware
  * @dev: device private data
@@ -763,6 +711,7 @@ static void i2c_dw_unprepare_recovery(struct i2c_adapter *adap)
 	i2c_dw_init_master(dev);
 }
 
+#ifndef CONFIG_SOC_STARFIVE_VIC7100
 static int i2c_dw_init_recovery_info(struct dw_i2c_dev *dev)
 {
 	struct i2c_bus_recovery_info *rinfo = &dev->rinfo;
@@ -790,6 +739,7 @@ static int i2c_dw_init_recovery_info(struct dw_i2c_dev *dev)
 
 	return 0;
 }
+#endif
 
 int i2c_dw_probe_master(struct dw_i2c_dev *dev)
 {
@@ -841,11 +791,11 @@ int i2c_dw_probe_master(struct dw_i2c_dev *dev)
 			dev->irq, ret);
 		return ret;
 	}
-
+#ifndef CONFIG_SOC_STARFIVE_VIC7100
 	ret = i2c_dw_init_recovery_info(dev);
 	if (ret)
 		return ret;
-
+#endif
 	/*
 	 * Increment PM usage count during adapter registration in order to
 	 * avoid possible spurious runtime suspend when adapter device is
@@ -858,8 +808,6 @@ int i2c_dw_probe_master(struct dw_i2c_dev *dev)
 		dev_err(dev->dev, "failure adding adapter: %d\n", ret);
 	pm_runtime_put_noidle(dev->dev);
 
-	i2c_dw_configure_gpio(dev);
-
 	return ret;
 }
 EXPORT_SYMBOL_GPL(i2c_dw_probe_master);
diff --git a/drivers/i2c/busses/i2c-designware-platdrv.c b/drivers/i2c/busses/i2c-designware-platdrv.c
index d6d760e393d8..0dff28515ae7 100644
--- a/drivers/i2c/busses/i2c-designware-platdrv.c
+++ b/drivers/i2c/busses/i2c-designware-platdrv.c
@@ -224,7 +224,6 @@ static const struct dmi_system_id dw_i2c_hwmon_class_dmi[] = {
 static int dw_i2c_plat_probe(struct platform_device *pdev)
 {
 	struct dw_i2c_platform_data *pdata = dev_get_platdata(&pdev->dev);
-	struct device_node *np = pdev->dev.of_node;
 	struct i2c_adapter *adap;
 	struct dw_i2c_dev *dev;
 	struct i2c_timings *t;
@@ -241,8 +240,6 @@ static int dw_i2c_plat_probe(struct platform_device *pdev)
 	dev->flags = (uintptr_t)device_get_match_data(&pdev->dev);
 	dev->dev = &pdev->dev;
 	dev->irq = irq;
-	dev->scl_gpio = of_get_named_gpio(np, "scl-gpio", 0);
-	dev->sda_gpio = of_get_named_gpio(np, "sda-gpio", 0);
 	platform_set_drvdata(pdev, dev);
 
 	ret = dw_i2c_plat_request_regs(dev);
-- 
2.30.0

