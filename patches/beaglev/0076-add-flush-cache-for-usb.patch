From 390d1317db11b384253cc574662868bb57bd2973 Mon Sep 17 00:00:00 2001
From: "Huan.Feng" <huan.feng@starfivetech.com>
Date: Tue, 23 Mar 2021 08:50:22 +0800
Subject: [PATCH 76/79] add flush cache for usb

---
 drivers/usb/core/devio.c        |  3 +++
 drivers/usb/core/hcd.c          | 14 +++++++++--
 drivers/usb/host/xhci-debugfs.c |  6 +++++
 drivers/usb/host/xhci-mem.c     |  6 ++++-
 drivers/usb/host/xhci-ring.c    | 41 +++++++++++++++++++++++++++++----
 drivers/usb/host/xhci.c         | 34 +++++++++++++++++++--------
 6 files changed, 87 insertions(+), 17 deletions(-)

diff --git a/drivers/usb/core/devio.c b/drivers/usb/core/devio.c
index 1b6b547a5d90..40e96a56928e 100644
--- a/drivers/usb/core/devio.c
+++ b/drivers/usb/core/devio.c
@@ -266,6 +266,9 @@ static int usbdev_mmap(struct file *file, struct vm_area_struct *vma)
 		if (dma_mmap_coherent(hcd->self.sysdev, vma, mem, dma_handle,
 				      size)) {
 			dec_usb_memory_use_count(usbm, &usbm->vma_use_count);
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+			cdns_flush_dcache(dma_handle, size);
+#endif
 			return -EAGAIN;
 		}
 	}
diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index ec191bca4b4b..a6708e791158 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -736,6 +736,9 @@ static int rh_call_control (struct usb_hcd *hcd, struct urb *urb)
 						bDeviceProtocol))
 			((struct usb_device_descriptor *) ubuf)->
 				bDeviceProtocol = USB_HUB_PR_HS_SINGLE_TT;
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		cdns_virt_flush_dcache(ubuf, len);
+#endif
 	}
 
 	kfree(tbuf);
@@ -1330,6 +1333,7 @@ static void hcd_free_coherent(struct usb_bus *bus, dma_addr_t *dma_handle,
 		memcpy(vaddr, *vaddr_handle, size);
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
 		cdns_virt_flush_dcache(vaddr, size);
+		cdns_virt_flush_dcache(*vaddr_handle, size);
 #endif
 	}
 	hcd_buffer_free(bus, size + sizeof(vaddr), *vaddr_handle, *dma_handle);
@@ -1492,8 +1496,8 @@ int usb_hcd_map_urb_for_dma(struct usb_hcd *hcd, struct urb *urb,
 					urb->transfer_buffer_length,
 					dir);
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-			cdns_flush_dcache(urb->setup_dma,
-					  sizeof(struct usb_ctrlrequest));
+			cdns_flush_dcache(urb->transfer_dma,
+					  urb->transfer_buffer_length + 8);
 #endif
 			if (ret == 0)
 				urb->transfer_flags |= URB_MAP_LOCAL;
@@ -2987,6 +2991,9 @@ int usb_hcd_setup_local_mem(struct usb_hcd *hcd, phys_addr_t phys_addr,
 	if (IS_ERR(local_mem))
 		return PTR_ERR(local_mem);
 
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_flush_dcache(phys_addr,size);
+#endif
 	/*
 	 * Here we pass a dma_addr_t but the arg type is a phys_addr_t.
 	 * It's not backed by system memory and thus there's no kernel mapping
@@ -3000,6 +3007,9 @@ int usb_hcd_setup_local_mem(struct usb_hcd *hcd, phys_addr_t phys_addr,
 		return err;
 	}
 
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_flush_dcache(dma,size);
+#endif
 	return 0;
 }
 EXPORT_SYMBOL_GPL(usb_hcd_setup_local_mem);
diff --git a/drivers/usb/host/xhci-debugfs.c b/drivers/usb/host/xhci-debugfs.c
index ccd3ecc66d35..0a6a351c1b32 100644
--- a/drivers/usb/host/xhci-debugfs.c
+++ b/drivers/usb/host/xhci-debugfs.c
@@ -207,6 +207,9 @@ static void xhci_ring_dump_segment(struct seq_file *s,
 					   le32_to_cpu(trb->generic.field[1]),
 					   le32_to_cpu(trb->generic.field[2]),
 					   le32_to_cpu(trb->generic.field[3])));
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		cdns_flush_dcache(dma,sizeof(*trb));
+#endif
 	}
 }
 
@@ -557,6 +560,9 @@ static int xhci_stream_context_array_show(struct seq_file *s, void *unused)
 		else
 			seq_printf(s, "%pad stream context entry not used deq %016llx\n",
 				   &dma, le64_to_cpu(stream_ctx->stream_ring));
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		cdns_flush_dcache(dma,16);
+#endif
 	}
 
 	return 0;
diff --git a/drivers/usb/host/xhci-mem.c b/drivers/usb/host/xhci-mem.c
index 9d6c16c4b40a..2b63d1a7dc77 100644
--- a/drivers/usb/host/xhci-mem.c
+++ b/drivers/usb/host/xhci-mem.c
@@ -1708,7 +1708,8 @@ void xhci_update_bw_info(struct xhci_hcd *xhci,
 #endif
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx, sizeof(struct xhci_input_control_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx, sizeof(struct xhci_input_control_ctx));
 #endif
 	}
 }
@@ -2250,6 +2251,9 @@ static void xhci_set_hc_event_deq(struct xhci_hcd *xhci)
 	xhci_dbg_trace(xhci, trace_xhci_dbg_init,
 			"// Write event ring dequeue pointer, "
 			"preserving EHB bit");
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_flush_dcache(deq, sizeof(union xhci_trb));
+#endif
 	xhci_write_64(xhci, ((u64) deq & (u64) ~ERST_PTR_MASK) | temp,
 			&xhci->ir_set->erst_dequeue);
 }
diff --git a/drivers/usb/host/xhci-ring.c b/drivers/usb/host/xhci-ring.c
index c5211407e7a2..32c0e703e01e 100644
--- a/drivers/usb/host/xhci-ring.c
+++ b/drivers/usb/host/xhci-ring.c
@@ -751,6 +751,9 @@ static void xhci_unmap_td_bounce_buffer(struct xhci_hcd *xhci,
 		return;
 	}
 
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_flush_dcache(seg->bounce_dma, ring->bounce_buf_len);
+#endif
 	dma_unmap_single(dev, seg->bounce_dma, ring->bounce_buf_len,
 			 DMA_FROM_DEVICE);
 	/* for in tranfers we need to copy the data from bounce to sg */
@@ -1284,8 +1287,16 @@ static void xhci_handle_cmd_reset_ep(struct xhci_hcd *xhci, int slot_id,
 	}
 
 	/* if this was a soft reset, then restart */
-	if ((le32_to_cpu(trb->generic.field[3])) & TRB_TSP)
+	if ((le32_to_cpu(trb->generic.field[3])) & TRB_TSP) {
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		cdns_virt_flush_dcache(trb, sizeof(union xhci_trb));
+#endif
 		ring_doorbell_for_active_rings(xhci, slot_id, ep_index);
+	}
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	else
+		cdns_virt_flush_dcache(trb, sizeof(union xhci_trb));
+#endif
 }
 
 static void xhci_handle_cmd_enable_slot(struct xhci_hcd *xhci, int slot_id,
@@ -2031,7 +2042,7 @@ static int xhci_requires_manual_halt_cleanup(struct xhci_hcd *xhci,
 	/* TRB completion codes that may require a manual halt cleanup */
 	if (trb_comp_code == COMP_USB_TRANSACTION_ERROR ||
 			trb_comp_code == COMP_BABBLE_DETECTED_ERROR ||
-			trb_comp_code == COMP_SPLIT_TRANSACTION_ERROR)
+			trb_comp_code == COMP_SPLIT_TRANSACTION_ERROR) {
 		/* The 0.95 spec says a babbling control endpoint
 		 * is not halted. The 0.96 spec says it is.  Some HW
 		 * claims to be 0.95 compliant, but it halts the control
@@ -2044,6 +2055,11 @@ static int xhci_requires_manual_halt_cleanup(struct xhci_hcd *xhci,
 #endif
 			return 1;
 		}
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		else
+			cdns_virt_flush_dcache(ep_ctx, sizeof(*ep_ctx));
+#endif
+	}
 
 	return 0;
 }
@@ -2474,8 +2490,15 @@ static int process_bulk_intr_td(struct xhci_hcd *xhci, struct xhci_td *td,
 		break;
 	case COMP_USB_TRANSACTION_ERROR:
 		if ((ep_ring->err_count++ > MAX_SOFT_RETRY) ||
-		    le32_to_cpu(slot_ctx->tt_info) & TT_SLOT)
+		    le32_to_cpu(slot_ctx->tt_info) & TT_SLOT) {
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+			cdns_virt_flush_dcache(slot_ctx, sizeof(*slot_ctx));
+#endif
 			break;
+		}
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+		cdns_virt_flush_dcache(slot_ctx, sizeof(*slot_ctx));
+#endif
 		*status = 0;
 		xhci_cleanup_halted_endpoint(xhci, slot_id, ep_index,
 					ep_ring->stream_id, td, EP_SOFT_RESET);
@@ -3660,6 +3683,10 @@ int xhci_queue_bulk_tx(struct xhci_hcd *xhci, gfp_t mem_flags,
 				       trb_buff_len);
 				le64_to_cpus(&send_addr);
 				field |= TRB_IDT;
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+				cdns_virt_flush_dcache(urb->transfer_buffer, trb_buff_len);
+				cdns_flush_dcache(send_addr, trb_buff_len);
+#endif
 			}
 		}
 
@@ -3815,6 +3842,12 @@ int xhci_queue_ctrl_tx(struct xhci_hcd *xhci, gfp_t mem_flags,
 			       urb->transfer_buffer_length);
 			le64_to_cpus(&addr);
 			field |= TRB_IDT;
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+			cdns_virt_flush_dcache(urb->transfer_buffer,
+			       urb->transfer_buffer_length);
+			cdns_flush_dcache(addr,
+			       urb->transfer_buffer_length);
+#endif
 		} else {
 			addr = (u64) urb->transfer_dma;
 		}
@@ -3830,7 +3863,7 @@ int xhci_queue_ctrl_tx(struct xhci_hcd *xhci, gfp_t mem_flags,
 			field |= TRB_DIR_IN;
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
 		cdns_virt_flush_dcache(setup, sizeof(struct usb_ctrlrequest));
-		cdns_flush_dcache(urb->transfer_dma, urb->transfer_buffer_length);
+		cdns_flush_dcache(addr, urb->transfer_buffer_length);
 #endif
 		queue_trb(xhci, ep_ring, true,
 				lower_32_bits(addr),
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index dbac79ee0ce7..0f3085d284e8 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -1960,6 +1960,9 @@ static int xhci_add_endpoint(struct usb_hcd *hcd, struct usb_device *udev,
 
 	ep_ctx = xhci_get_ep_ctx(xhci, virt_dev->in_ctx, ep_index);
 	trace_xhci_add_endpoint(ep_ctx);
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_virt_flush_dcache(ep_ctx, sizeof(*ep_ctx));
+#endif
 
 	xhci_dbg(xhci, "add ep 0x%x, slot id %d, new drop flags = %#x, new add flags = %#x\n",
 			(unsigned int) ep->desc.bEndpointAddress,
@@ -2757,8 +2760,9 @@ static int xhci_reserve_bandwidth(struct xhci_hcd *xhci,
 					virt_dev->tt_info);
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx,
-				sizeof(struct xhci_input_control_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx,
+					       sizeof(struct xhci_input_control_ctx));
 #endif
 	}
 	/* Overwrite the information stored in the endpoints' bw_info */
@@ -2778,8 +2782,9 @@ static int xhci_reserve_bandwidth(struct xhci_hcd *xhci,
 					virt_dev->tt_info);
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx,
-				sizeof(struct xhci_input_control_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx,
+					       sizeof(struct xhci_input_control_ctx));
 #endif
 	}
 
@@ -2821,8 +2826,9 @@ static int xhci_reserve_bandwidth(struct xhci_hcd *xhci,
 					virt_dev->tt_info);
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx,
-				       sizeof(struct xhci_input_control_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx,
+					       sizeof(struct xhci_input_control_ctx));
 #endif
 		/* Revert the endpoint back to its old information */
 		memcpy(&virt_dev->eps[i].bw_info, &ep_bw_info[i],
@@ -2841,8 +2847,9 @@ static int xhci_reserve_bandwidth(struct xhci_hcd *xhci,
 					virt_dev->tt_info);
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx,
-					sizeof(struct xhci_input_control_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx,
+					       sizeof(struct xhci_input_control_ctx));
 #endif
 	}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
@@ -2908,6 +2915,7 @@ static int xhci_configure_endpoint(struct xhci_hcd *xhci,
 	trace_xhci_configure_endpoint_ctrl_ctx(ctrl_ctx);
 	trace_xhci_configure_endpoint(slot_ctx);
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_virt_flush_dcache(ctrl_ctx, sizeof(*ctrl_ctx));
 	cdns_virt_flush_dcache(slot_ctx, sizeof(*slot_ctx));
 #endif
 
@@ -3071,7 +3079,8 @@ static int xhci_check_bandwidth(struct usb_hcd *hcd, struct usb_device *udev)
 			xhci_check_bw_drop_ep_streams(xhci, virt_dev, i);
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(ctrl_ctx, sizeof(*ctrl_ctx));
+		else
+			cdns_virt_flush_dcache(ctrl_ctx, sizeof(*ctrl_ctx));
 #endif
 	}
 	xhci_zero_in_ctx(xhci, virt_dev);
@@ -4266,7 +4275,8 @@ static int xhci_setup_device(struct usb_hcd *hcd, struct usb_device *udev,
 			goto out;
 		}
 #ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
-		cdns_virt_flush_dcache(slot_ctx, sizeof(*slot_ctx));
+		else
+			cdns_virt_flush_dcache(slot_ctx, sizeof(*slot_ctx));
 #endif
 	}
 
@@ -4316,6 +4326,10 @@ static int xhci_setup_device(struct usb_hcd *hcd, struct usb_device *udev,
 #endif
 
 	trace_xhci_address_ctrl_ctx(ctrl_ctx);
+#ifdef CONFIG_USB_CDNS3_HOST_FLUSH_DMA
+	cdns_virt_flush_dcache(ctrl_ctx, sizeof(*ctrl_ctx));
+#endif
+
 	spin_lock_irqsave(&xhci->lock, flags);
 	trace_xhci_setup_device(virt_dev);
 	ret = xhci_queue_address_device(xhci, command, virt_dev->in_ctx->dma,
-- 
2.30.0

